#!/usr/bin/env perl
# Feedmailer
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>
#
# See http://github.com/user/feedmailer

#use v5.12;
use feature 'unicode_strings';
use feature 'say';

use App::Feedmailer;

#use locale;
use utf8;
binmode( STDIN,  ":encoding(UTF-8)" );
binmode( STDOUT, ":encoding(UTF-8)" );
binmode( STDERR, ":encoding(UTF-8)" );

$Getopt::Std::STANDARD_HELP_VERSION = 1;

my $VERSION = $App::Feedmailer::VERSION;

sub VERSION_MESSAGE {
    my ($fh) = @_;
    say $fh "reporter (%s)", $App::Feedmailer::PACKAGE_STRING;
}

sub HELP_MESSAGE {
    my ($fh) = @_;
    say $fh "No help message available yet.";
}

our $count_of_entrys : shared;
our %opts;

getopts( "i:a:f:F:l:st:s", \%opts )
    || die $!;

$opts{a} //= 'user <user@example.net>';
$opts{l} //= "http://example.net";
$opts{t} //= "NEWS - all you can read";

#$opts{f} //= $App::Feedmailer::WHITELIST_FILE;
#$opts{F} //= $App::Feedmailer::BLACKLIST_FILE;

my @whitelist;
if ( $opts{f} ) {
    App::Feedmailer::file2list( \@whitelist, $opts{f},
        { mode => Fcntl::O_RDONLY } );
}
my @blacklist;
if ( $opts{F} ) {
    App::Feedmailer::file2list( \@blacklist, $opts{F},
        { mode => Fcntl::O_RDONLY } );
}
my $parser = DateTime::Format::Strptime->new(
    pattern  => '%Y-%m-%d-%H-%M-%S',
    on_error => sub { warn Dumper $@, return DateTime->now; }
    ,    # 'undef', # 'croak',
);

my @feed_args = ();
my $feed      = XML::Feed->new(@feed_args) or die XML::Feed->errstr;
$feed->author( Email::Address->parse( $opts{a} ) );
$feed->id( $feed->link() );
$feed->link( $feed->link() );
$feed->modified( DateTime->now );
$feed->self_link( $opts{l} );
$feed->title( $opts{t} );

sub _get_all_ids {
    my () = @_;
    my @all_ids = ();
    for ( $feed->entries ) {
        push @all_ids, $_->id;
    }
    return @all_ids;
}

sub _add_entry {
    my ( $dt, $title, $uri, $author, $summary, $content ) = @_;

    App::Feedmailer::is_double( $_, \@{_get_all_ids} ) && return;

    my $entry = XML::Feed::Entry->new();

    $entry->author($author)   if ($author);
    $entry->content($content) if ($content);
    $entry->id($uri);
    $entry->link($uri);
    $entry->modified( $dt || DateTime->now );
    $entry->summary($summary) if ($summary);
    $entry->title($title);

    $feed->add_entry($entry);

    $count_of_entrys++;
}

sub _get_p {
    my ($uri)         = @_;
    my $p             = HTML::HeadParser->new;
    my $http_response = App::Feedmailer::download( $uri, undef, $opts{s} );
    $p->parse( $http_response->decoded_content );
    return ( $http_response, $p );
}

for ( (@ARGV) ? @ARGV : <STDIN> ) {
    my $uri = URI->new($_);
    if ( !$uri ) {
        warn $_, ": Not an URI";
        next;
    }
    my ( $http_response, $p ) = _get_p($uri);
    next if ( !$http_response->is_success );

    my $title = $p->header('Title');

    next
        if ( $opts{f}
        && App::Feedmailer::ig( $title, \@whitelist, \@blacklist ) ); # ignore

    my $author = join ", ",
        Email::Address->parse( $p->header('X-Meta-Author') );

    my $content = $http_response->decoded_content;
    my $dt      = $parser->parse_datetime( $p->header('X-Meta-Date') );
    my $summary = $p->header('X-Meta-Description');

    my $link = $uri;
    if ( $opts{C} ) {
        my $canonical_link = App::Feedmailer::Net::get_canonical($link);
        if ($canonical_link) {
            $link = $canonical_link;
        }
    }

    _add_entry( $dt, $title, $link, $author, $summary, $content );

}

print App::Feedmailer::to_utf8( $feed->as_xml );
warn "Feed includes $count_of_entrys articles\n";
exit( !$count_of_entrys );

